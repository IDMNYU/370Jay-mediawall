<jittershader name="tf.particles.jxs">
	<description>"transform feedback based particle simulation"</description>
	<param name="Position" type="vec3" state="POSITION" />
	<param name="Velocity" type="vec3" state="NORMAL" />
	<param name="Color" type="vec4" state="COLOR" />
	<param name="TypeAgeID" type="vec3" state="VERTEX_ATTR0" />
	<param name="Source" type="vec4" state="VERTEX_ATTR1" />
	<param name="time" type="float" default="0.0" />
	<param name="delta" type="float" default="0.0" />	
	<param name="offset" type="vec3" default="0. 0. 0." />
	<param name="pparams" type="vec3" default="0.2 5. 3." />
	
	<param name="vel_damp" type="float" default="0.99999" />
	<param name="life_damp" type="float" default="0.001" />
	<param name="noise_factor" type="vec4" default="0.5 0.2 0.2 0.2" />	
	
	<language name="glsl" version="1.5">
		<bind param="Position" program="vp" />
		<bind param="Velocity" program="vp" />
		<bind param="Color" program="vp" />
		<bind param="TypeAgeID" program="vp" />
		<bind param="Source" program="vp" />
		<bind param="time" program="gp" />
		<bind param="delta" program="gp" />		
		<bind param="noise_tex" program="gp" />
		<bind param="offset" program="gp" />
		<bind param="pparams" program="gp" />
		
		<bind param="vel_damp" program="gp" />
		<bind param="life_damp" program="gp" />
		<bind param="noise_factor" program="gp" />
				
		<program name="vp" type="vertex"  >
		<![CDATA[
#version 330 core 
in vec3 Position;
in vec3 Velocity;
in vec4 Color;
in vec3 TypeAgeID;
in vec3 Source;

out vec3 Position0;
out vec3 Velocity0;
out vec4 Color0;
out vec3 TypeAgeID0;
out vec3 Source0;

void main() {  
	Position0 = Position;
	Velocity0 = Velocity;
	Color0 = Color;
	TypeAgeID0 = vec3(TypeAgeID.xy, gl_VertexID);
	Source0 = Source;
}
		]]>
		</program>
		<program name="gp" type="geometry">
		<![CDATA[
#version 330

layout(points) in;
layout(points) out;  
layout(max_vertices = 30) out;

in vec3 Position0[];
in vec3 Velocity0[];
in vec4 Color0[];
in vec3 TypeAgeID0[];
in vec3 Source0[];

out vec3 Position1;
out vec3 Velocity1;
out vec4 Color1;
out vec3 TypeAgeID1;

uniform float time;
uniform float delta;
uniform vec3 offset;
uniform vec3 pparams;

uniform float vel_damp;
uniform float life_damp;
uniform vec4 noise_factor;

#define PARTICLE_TYPE_LAUNCHER 0.0f 
#define PARTICLE_TYPE_PARTICLE 1.0f 


vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
	return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
	return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
	const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
	const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

	// First corner
	vec3 i  = floor(v + dot(v, C.yyy) );
	vec3 x0 =   v - i + dot(i, C.xxx) ;

	// Other corners
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );

	//   x0 = x0 - 0.0 + 0.0 * C.xxx;
	//   x1 = x0 - i1  + 1.0 * C.xxx;
	//   x2 = x0 - i2  + 2.0 * C.xxx;
	//   x3 = x0 - 1.0 + 3.0 * C.xxx;
	vec3 x1 = x0 - i1 + C.xxx;
	vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

	// Permutations
	i = mod289(i); 
	vec4 p = permute( permute( permute( 
	     i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	float n_ = 0.142857142857; // 1.0/7.0
	vec3  ns = n_ * D.wyz - D.xzx;

	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

	vec4 x = x_ *ns.x + ns.yyyy;
	vec4 y = y_ *ns.x + ns.yyyy;
	vec4 h = 1.0 - abs(x) - abs(y);

	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );

	//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));

	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);

	//Normalise gradients
	vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;

	// Mix final noise value
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	m = m * m;
	return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
	                        dot(p2,x2), dot(p3,x3) ) );
}

vec3 snoiseVec3( vec3 x ){

  float s  = snoise(vec3( x ));
  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
  vec3 c = vec3( s , s1 , s2 );
  return c;

}


vec3 curlNoise( vec3 p ){
  
  const float e = .1;
  vec3 dx = vec3( e   , 0.0 , 0.0 );
  vec3 dy = vec3( 0.0 , e   , 0.0 );
  vec3 dz = vec3( 0.0 , 0.0 , e   );

  vec3 p_x0 = snoiseVec3( p - dx );
  vec3 p_x1 = snoiseVec3( p + dx );
  vec3 p_y0 = snoiseVec3( p - dy );
  vec3 p_y1 = snoiseVec3( p + dy );
  vec3 p_z0 = snoiseVec3( p - dz );
  vec3 p_z1 = snoiseVec3( p + dz );

  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  const float divisor = 1.0 / ( 2.0 * e );
  return normalize( vec3( x , y , z ) * divisor );

}

void main() 
{
	float launcherLifetime = pparams.x;
	float lifetime = pparams.y; 
	float emitCount = 1;

	float type = TypeAgeID0[0].x;
	float age = TypeAgeID0[0].y + (delta);
	float id = TypeAgeID0[0].z;
	vec3 src = Source0[0];
	//vec4 col = Color0[0];
	
	float col = pparams.z > 0 ? 1.0 - abs(1 - 2 * (age / lifetime)) : 1.0 - (age / lifetime);
	
	Color1 = vec4(col);
	
	
	if(src.z > 0) {
		vec3 pos = src + offset;
		if (age >= launcherLifetime) {
			for (int i = 0; i < emitCount; i++) {
				Position1 = pos;
				
				vec3 noise = delta * noise_factor.x * curlNoise(Position1.rgb * noise_factor.y + time * noise_factor.z);
				Velocity1 = (Velocity0[0] + noise * noise_factor.w) * vel_damp;
		
				TypeAgeID1 = vec3(PARTICLE_TYPE_PARTICLE, 0, id);
				
				EmitVertex();  
				EndPrimitive();
			}
			age = 0;
		}

		Position1 = Position0[0];
		Velocity1 = Velocity0[0];
		TypeAgeID1 = vec3(type, age, id);

		EmitVertex();
		EndPrimitive(); 
	}
	else if(age < lifetime) {
		
		vec3 deltaP = delta * Velocity0[0]; 
		Position1 = Position0[0] + deltaP; 
		
		vec3 noise = delta * noise_factor.x * curlNoise(Position1.rgb * noise_factor.y + time * noise_factor.z);
		Velocity1 = (Velocity0[0] + noise * noise_factor.w) * vel_damp;
		
		TypeAgeID1 = vec3(type, age, id);

		EmitVertex();
		EndPrimitive();
	}
	else {
		Position1 = vec3(-1000, -1000, 0);
		Velocity1 = Velocity0[0];
		TypeAgeID1 = vec3(type, age, id);

		EmitVertex();
		EndPrimitive();
	}
} 
		]]>
		</program>
		<program name="fp" type="fragment"  >
		<![CDATA[
#version 330 core
void main() 
{
}
		]]>
		</program>
	</language>
</jittershader>